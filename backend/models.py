from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, DateTime, Text, LargeBinary
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from database import Base




class User(Base):
    """
    User model for authentication and profile information
    """
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True)
    password_hash = Column(String(60), nullable=False)
    wallet_address = Column(String(42), unique=True, index=True, nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Add this relationship to link to reports
    reports = relationship("Report", back_populates="user", cascade="all, delete-orphan")


class Report(Base):
    """
    Report model for storing LLM-generated content with optional base64 encoded images, includes report type
    """
    __tablename__ = "reports"

    id = Column(Integer, primary_key=True, index=True)  # Auto-generated by PostgreSQL
    content = Column(Text, nullable=False)  # LLM-generated text content
    report_type = Column(Text, nullable=False) # Report type
    image_data = Column(Text, nullable=True)  # Optional base64 encoded image
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationship to user (many reports belong to one user)
    user = relationship("User", back_populates="reports")


class Images(Base):
    __tablename__ = "images"
    token_address = Column(String, primary_key=True, index=True)
    image = Column(LargeBinary, nullable=False)
